<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://JinboYang94.github.io</id><title>Jinbo</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-06-06T17:14:06+08:00</updated> <author> <name>Jinbo Yang</name> <uri>https://JinboYang94.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://JinboYang94.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Jinbo Yang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Android Camera2 Fundamentals</title><link href="https://JinboYang94.github.io/posts/Android-Camera2-Basics/" rel="alternate" type="text/html" title="Android Camera2 Fundamentals" /><published>2021-04-15T13:29:00+08:00</published> <updated>2021-04-15T13:29:00+08:00</updated> <id>https://JinboYang94.github.io/posts/Android-Camera2-Basics/</id> <content src="https://JinboYang94.github.io/posts/Android-Camera2-Basics/" /> <author> <name>Jinbo Yang</name> </author> <category term="Android" /> <category term="Java" /> <category term="Basic" /> <summary> Android Camera2使用过程中的总结: A. Camera2 常用类: 1. CameraManager CameraManager是Camera2中新加入的类，用来管理摄像头相关的所有信息/内容，通过getSystemService(Context.CAMERA_SERVICE)实例化。 Docs: A system service manager for detecting, characterizing, and connecting to CameraDevices. CameraCharacteristics getCameraCharacteristics(String cameraId) 得到camera的参数和属性 Source code: Query the capabilities of ... </summary> </entry> <entry><title>Python Fundamentals</title><link href="https://JinboYang94.github.io/posts/Python-Fundamentals/" rel="alternate" type="text/html" title="Python Fundamentals" /><published>2020-12-14T14:00:00+08:00</published> <updated>2020-12-09T14:00:00+08:00</updated> <id>https://JinboYang94.github.io/posts/Python-Fundamentals/</id> <content src="https://JinboYang94.github.io/posts/Python-Fundamentals/" /> <author> <name>Jinbo Yang</name> </author> <category term="Basic" /> <category term="Python" /> <summary> Python知识点总结+复习(长期更新) A. 基础知识 1. Python Built-in Type Python中定义变量无需声明类型 int: 无取值范围，有正负 float：基本和java中float一样 complex：复数，(real part) + (imaginary part)j，很少用 str：基本和java中string一样，但是定义时用’ / “ / ‘'’均可 list：有序，基本和java中array一样，区别在list中的item不限制是否同一类型 truple：基本和list一样，区别在truple时immutable的 bool: True, False Set: 无序，类似于j... </summary> </entry> <entry><title>Threads and Concurrent</title><link href="https://JinboYang94.github.io/posts/Threads-And-Concurrent/" rel="alternate" type="text/html" title="Threads and Concurrent" /><published>2020-12-02T14:00:00+08:00</published> <updated>2020-12-09T14:00:00+08:00</updated> <id>https://JinboYang94.github.io/posts/Threads-And-Concurrent/</id> <content src="https://JinboYang94.github.io/posts/Threads-And-Concurrent/" /> <author> <name>Jinbo Yang</name> </author> <category term="Basic" /> <category term="Java" /> <summary> 并发和线程(看心情更新) A. 基础知识 1. 线程(thread)和进程(process) 线程是操作系统能够进行运算调度的最小单位，大部分情况下，它被包含在进程之中，是进程中的实际运作单位 进程是指计算机中已运行的程序 多进程vs多线程：本质区别在多线程共享数据，多进程每个进程拥有自己的一整套变量 2. 创建新线程常见方法 Method1: 定义Thread的子类(extends Thread)，并override其run()方法，然后new一个实例，并用start()启动 class Thread extends Thread { ..... @Override public void run() { } } Thread t1=new Thread(); t1.start(); Method2：定义实现Runn... </summary> </entry> <entry><title>Computer Networks Fundamentals</title><link href="https://JinboYang94.github.io/posts/Computer-Networks-QA/" rel="alternate" type="text/html" title="Computer Networks Fundamentals" /><published>2020-11-28T11:00:00+08:00</published> <updated>2020-11-29T14:00:00+08:00</updated> <id>https://JinboYang94.github.io/posts/Computer-Networks-QA/</id> <content src="https://JinboYang94.github.io/posts/Computer-Networks-QA/" /> <author> <name>Jinbo Yang</name> </author> <category term="Basic" /> <category term="Computer Networks" /> <summary> Computer Networks知识点总结(长期更新) A. 基本内容 1. 体系结构 TCP/IP 五层结构 应用层(Application Layer) -is where network applications and their application-layer protocols reside -主要通过应用进程间的通信交互来完成网络应用功能 -其交互的数据单元(packet)称为报文(message) -Protocols: HTTP, FTP, SMTP, DNS 传输层(Transport Layer) -transports application-layer messages between application endpoints -提供面向连接的数据流支持、可靠性、流量控... </summary> </entry> <entry><title>Java Fundamentals</title><link href="https://JinboYang94.github.io/posts/Java-Fundamentals/" rel="alternate" type="text/html" title="Java Fundamentals" /><published>2020-11-12T14:00:00+08:00</published> <updated>2020-12-14T17:52:00+08:00</updated> <id>https://JinboYang94.github.io/posts/Java-Fundamentals/</id> <content src="https://JinboYang94.github.io/posts/Java-Fundamentals/" /> <author> <name>Jinbo Yang</name> </author> <category term="Basic" /> <category term="Java" /> <summary> Java知识点总结+复习(长期更新) JavaSE部分 A. 基础知识 1. 面向过程和面向对象的区别 面向过程(Progress oriented) 优点：性能更高，因为调用类需要实例化，更消耗资源。单片机、嵌入式、Linux/Unix开发常用，因为性能是最重要的 缺点：没有面向对象易维护、易复用、易扩展 面向对象(Object oriented) 优点：易维护、易复用、易扩展，有封装、继承、多态的特性，可以设计出低耦合系统，使系统更加灵活和易于维护 缺点：性能较低 2. Java面向对象三大特点：封装、继承、多态 封装(Encapsulation) 封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法(就是接口) 继承(Inheritance) 继承是使用已存在的类的定义作为基础来建立新的类，新类的定义可以增加新的属性或方法，可以使用父类... </summary> </entry> </feed>
